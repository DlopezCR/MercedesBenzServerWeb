@page "/solicitudes/{estatus:int}"
@inject Services.IPaqueteService Service
@using BlazorDateRangePicker

<div class="mbz-row-center">
    <div class="mbz-card-titulo-2 mbz-font-ATitleCondOffice-40 mbz-text-secondary">
        <span class="">Solicitudes @titulo</span>
    </div>
</div>

<div class="mbz-card-buscar">
    <EditForm Model="@model" OnSubmit="@OnSubmit">

        <div class="d-flex">
            <div class="mbz-edi-w-1d3">
                <DateRangePicker @ref="Picker" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("es-MX"))" DateFormat="dd MMMM yyyy" AutoApply="true"
                                 MinDate="MinDate" MaxDate="MaxDate"
                                 StartDate="@model.FechaInicial" EndDate="@model.FechaFinal" OnRangeSelect="OnRangeSelect"
                                 OnOpened="OnDatePickerOpened"
                                 OnClosed="OnDatePickerClosed">
                    <PickerTemplate Context="PickerContext">
                        <div id="@PickerContext.Id" @onclick="PickerContext.Toggle" class="mbz-picker-range-buscar">
                            <i class="">
                                <img src="../image/calendario.png" style="width:22px;height:20px;" />
                            </i>&nbsp;
                            <input class="mbz-input-picker-range" value="@PickerContext.FormattedRange" placeholder="Rango de fechas"
                                   @onchange="((ChangeEventArgs __e) => OnRangeChange(__e.Value.ToString().Trim()))" />
                            <i class="float-right">
                                <img src="../image/chevron-down-outline.svg" style="width:18px;height:18px;" />
                            </i>
                        </div>
                    </PickerTemplate>
                </DateRangePicker>
            </div>
            <div class="mbz-edi-w-1d3">
            </div>
            <div class="mbz-edi-w-1d3">
                <button type="submit" class="btn mbz-btn-primary mbz-font-STextOffice-18">Buscar</button>
            </div>
        </div>

    </EditForm>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="container alert-info mbz-font-STextOffice-16">@mensaje</div>
    }

    <SpinLoader IsLoading="isLoadingData">
        <LoadingTemplate>
            <div class="">
                <br />
                <CircleFade Center="true" Size="50px" Color="#232F3B"></CircleFade>
                <br />
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (respuesta != null)
            {
                <SolicitudesEstatus Data="@respuesta.Data" Estatus="@solicitudEstatus"></SolicitudesEstatus>

                <Paginacion PaginaActual="paginaActual" PaginasTotal="paginasTotal" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
            }
        </ContentTemplate>
    </SpinLoader>


</div>


@code {
    [CascadingParameter(Name = "RegistrosPagina")]
    protected int registrosPagina { get; set; }

    [Parameter] public int estatus { get; set; }

    private SolicitudEstatus solicitudEstatus { get; set; }
    private string titulo { get; set; }

    SolicitudEstatusRequest model = new();
    PaginacionRequest paginacion = new();
    RespuestaPaginada respuesta = null;
    private string mensaje = String.Empty;
    private bool isLoadingData = true;

    private int totalRegistros = 0;
    private int paginaActual = 1;
    private int paginasTotal = 0;

    DateRangePicker Picker;
    DateTime MinDate { get; set; } = new DateTime(2022, 01, 1);
    DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);
    private bool FechaCapturada { get; set; } = false;
    private bool ValidarFecha { get; set; } = false;

    protected override void OnInitialized()
    {
        registrosPagina = 4;
        solicitudEstatus = (SolicitudEstatus)estatus;
        switch (solicitudEstatus)
        {
            case SolicitudEstatus.Nuevas:
                titulo = "nuevas";
                break;
            case SolicitudEstatus.Proceso:
                titulo = "en proceso";
                break;
            case SolicitudEstatus.Finalizadas:
                titulo = "finalizadas";
                break;
        }
        model.Estatus = solicitudEstatus;
        model.FechaInicial = DateTime.Now.AddDays(-(DateTime.Now.Day - 1));
        model.FechaFinal = DateTime.Now;
        FechaCapturada = true;
        paginacion.Pagina = paginaActual;
        paginacion.RegistrosPagina = registrosPagina;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(async () =>
            {
                await ConsultarDatos(paginaActual);
                if(respuesta == null)
                {
                    model.FechaFinal = model.FechaInicial.AddDays(-1);
                    model.FechaInicial = model.FechaInicial.AddMonths(-1);
                    await ConsultarDatos(paginaActual);
                }
                isLoadingData = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task OnSubmit()
    {
        bool IsData = false;

        if (FechaCapturada)
        {
            model.FechaInicial = new DateTime(Picker.StartDate.Value.Year, Picker.StartDate.Value.Month, Picker.StartDate.Value.Day, 0, 0, 0);
            model.FechaFinal = new DateTime(Picker.EndDate.Value.Year, Picker.EndDate.Value.Month, Picker.EndDate.Value.Day, 23, 59, 59);
            IsData = true;
        }
        if (IsData)
        {
            paginaActual = 1;
            await PaginaSeleccionada(paginaActual);
        }
        else
        {
            mensaje = "Debe ingresar la fecha inicial y la fecha final";
            respuesta = null;
        }
        return;
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        isLoadingData = true;
        this.StateHasChanged();
        await ConsultarDatos(paginaActual);
        isLoadingData = false;
        this.StateHasChanged();
    }

    private async Task ConsultarDatos(int pagina = 1)
    {
        mensaje = "";
        model.FechaInicial = new DateTime(model.FechaInicial.Year, model.FechaInicial.Month, model.FechaInicial.Day, 00, 00, 00);
        model.FechaFinal = new DateTime(model.FechaFinal.Year, model.FechaFinal.Month, model.FechaFinal.Day, 23, 59, 59);
        paginacion.Pagina = pagina;
        (string mensajeResponse, RespuestaPaginada respuestaResponse) = await Service.GetSolicitudesEstatusAsync(model, paginacion);
        respuesta = respuestaResponse;
        if (respuesta == null)
        {
            if (string.IsNullOrEmpty(mensajeResponse) || mensajeResponse == "True")
                mensaje = "No se encontraron datos del período ingresado";
            else
                mensaje = mensajeResponse;
        }
        else
        {
            totalRegistros = respuesta.TotalRegistros;
            paginasTotal = respuesta.TotalPaginas;
            mensaje = "";
        }
    }

    public void OnDatePickerOpened()
    {
        ValidarFecha = true;
    }

    public void OnDatePickerClosed()
    {
        if (ValidarFecha)
        {
            if (!string.IsNullOrEmpty(Picker.FormattedRange))
                FechaCapturada = true;
        }
    }

    public void OnRangeSelect(DateRange range)
    {
        model.FechaInicial = new DateTime(range.Start.Year, range.Start.Month, range.Start.Day, 0, 0, 0);
        model.FechaFinal = new DateTime(range.End.Year, range.End.Month, range.End.Day, 23, 59, 59);
    }

    void OnRangeChange(string value)
    {
        FechaCapturada = false;
        if (value == Picker.FormattedRange)
            FechaCapturada = true;
        ValidarFecha = false;
    }

}
