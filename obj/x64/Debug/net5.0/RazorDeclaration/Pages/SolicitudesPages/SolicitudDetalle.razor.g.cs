// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MercedesBenzServerWeb.Pages.SolicitudesPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using MercedesBenzServerWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using MercedesBenzServerWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using MercedesBenzModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using MercedesBenzServerWeb.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\_Imports.razor"
using BlazorPro.Spinkit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\Pages\SolicitudesPages\SolicitudDetalle.razor"
using MercedesBenzLibrary;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/solicitudDetalle/{id:int}/{urlOrigen}/{estatus:int}")]
    public partial class SolicitudDetalle : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 930 "D:\Proyectos\Net\MercedesBenzWeb\MercedesBenzServerWeb\Pages\SolicitudesPages\SolicitudDetalle.razor"
       
    [Parameter] public int Id { get; set; }
    [Parameter] public string UrlOrigen { get; set; } = "solicitudAdmin";
    [Parameter] public int Estatus { get; set; } = -1;

    private string mensaje = "";

    private bool recargarPagina = true;
    private bool renderizarMapa = true;
    private bool existeFotoCamara = false;

    private bool isLoadingModel = true;
    private SolicitudFicha model = null;

    private string resultadoIBMS { get; set; } = "";

    private string tituloListaNegra = "Lista negra";
    private bool agregarListaNegra = false;
    private bool mostrarListaNegra = false;

    private bool agregarResolucion = false;
    private int tipoResolucionId = 0;
    private bool mostrarResolucion = false;

    private string tituloScoreIBMS = "Score IBMS";

    private string tituloIdentificacion = "Semáforo de identificación";
    private bool isLoadingIdentificacion = true;
    private SolicitudIdentificacion validacionIdentificacion { get; set; } = null;
    private bool mostrarIdentificacion = false;

    private string tituloAvisoPrivacidad = "Aviso de privacidad";
    private bool isLoadingPrivacidad = true;
    private SolicitudAvisoPrivacidad validacionPrivacidad { get; set; } = null;
    private bool mostrarPrivacidad = false;

    private string tituloComparacionFacial = "Semáforo de verificación facial";
    private bool isLoadingComparacionFacial = true;
    private SolicitudComparacionFacial validacionComparacionFacial { get; set; } = null;
    private bool mostrarComparacionFacial = false;

    private string tituloHuellas = "Huellas";
    private bool isLoadingComparacionHuellas = true;
    private SolicitudComparacionHuellas validacionComparacionHuellas { get; set; } = null;
    private bool mostrarHuellas = false;

    const string TituloIne = "Portal del INE";
    private bool isLoadingIne = true;
    private IneResponse validacionIne { get; set; } = null;
    private bool mostrarIne = false;

    private string tituloCorreo = "Semáforo de correo electrónico";
    private bool isLoadingCorreo = true;
    private CorreoResponse validacionCorreo { get; set; } = null;
    private bool mostrarCorreo = false;

    private string tituloTelefono = "Semáforo de número telefónico";
    private bool isLoadingTelefono = true;
    private TelefonoResponse validacionTelefono { get; set; } = null;
    private bool mostrarTelefono = false;

    private string tituloCurp = "Semáforo de CURP";
    private bool isLoadingCurp = true;
    private CurpResponse validacionCurp { get; set; } = null;
    private bool mostrarCurp = false;

    private string tituloListas = "Listas de interes";
    private bool isLoadingListas = true;
    private ListaResponse validacionListas { get; set; } = null;
    private bool mostrarListas = false;

    const string TituloComprobanteIngresos = "Semáforo de comprobante de ingresos";
    private string _tipoDocumentoIngresos = "1";
    private bool isLoadingComprobanteIngresos = true;
    private ComprobanteResponse validacionComprobanteIngresos { get; set; } = null;
    private bool mostrarComprobanteIngresos = false;
    private SolicitudDocumento documentoComprobanteIngresos { get; set; } = null;
    private int _documentoIdComprobanteIngresos = -1;
    private string formatoComprobanteIngresos = "";

    const string TituloComprobanteBancario = "Semáforo de comprobante bancario";
    private string _tipoDocumentoBancario = "3";
    private bool isLoadingComprobanteBancario = true;
    private ComprobanteResponse validacionComprobanteBancario { get; set; } = null;
    private bool mostrarComprobanteBancario = false;
    private SolicitudDocumento documentoComprobanteBancario { get; set; } = null;
    private int _documentoIdComprobanteBancario = -1;
    private string formatoComprobanteBancario = "";

    const string TituloComprobanteDomicilio = "Semáforo de comprobante de domicilio";
    private string _tipoDocumentoDomicilio = "2";
    private bool isLoadingComprobanteDomicilio = true;
    private ComprobanteResponse validacionComprobanteDomicilio { get; set; } = null;
    private bool mostrarComprobanteDomicilio = false;
    private SolicitudDocumento documentoComprobanteDomicilio { get; set; } = null;
    private int _documentoIdComprobanteDomicilio = -1;
    private string formatoComprobanteDomicilio = "";

    private string tituloResolucion = "Pre aprobación";
    private string tituloOrigen = "Co-acreditado / Aval";

    private bool popupOpen { get; set; } = false;
    private string mensajePopup = "";

    private bool popupOpenComent { get; set; } = false;
    private string mensajePopupComent = "";

    private int origenId = 1;
    private int tipoLogIdError = 1;

    ElementReference divProgressScore;

    protected override void OnInitialized()
    {
        model = null;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (recargarPagina)
        {
            recargarPagina = false;
            await Task.Run(async () =>
            {
                await ConsultarDatos(Id);
                if (UrlOrigen == "solicitudAdmin")
                    AppState.RefreshNotify();
                isLoadingModel = false;
                await InvokeAsync(StateHasChanged);
            });
        }
        else
        {
            if (model != null && renderizarMapa)
            {
                renderizarMapa = false;
                await JS.InvokeVoidAsync("MostrarScore", divProgressScore, 100, model.Validaciones.ResultadoIBMS, 60, "#EAEAEA", model.Validaciones.SemaforoIBMS, "%", true);
                string html = await JS.InvokeAsync<string>("initMap", model.DireccionCompleta);
                //if (string.IsNullOrEmpty(model.Validaciones.ResultadoGoogleMaps))
                //    await Task.Run(async () =>
                //    {
                //        string html = await JS.InvokeAsync<string>("initMap", model.DireccionCompleta);
                //        if (html != null)
                //        {
                //            (string mensajeResponse, bool resultado) = await Service.MapaDomicilioPutAsync(Credencial.Token, new MapaDomicilioRequest() { SolicitanteId = model.SolicitanteId, Html = html });
                //            if (resultado)
                //                model.Validaciones.ResultadoGoogleMaps = html;
                //        }
                //    });
                //else
                //    await JS.InvokeVoidAsync("mostrarMapa", model.Validaciones.ResultadoGoogleMaps);
            }
        }
    }

    private async Task ConsultarDatos(int Id)
    {
        var request = new SolicitudRequest() { SolicitanteId = Id, UsuarioId = Credencial.UsuarioId };
        (string mensajeResponse, SolicitudFicha respuestaResponse) = await Service.SolicitudPostAsync(request);
        model = respuestaResponse;
        if (model == null)
        {
            if (string.IsNullOrEmpty(mensajeResponse) || mensajeResponse == "True")
                mensaje = "No se encontro la solicitud";
            else
                mensaje = mensajeResponse;
        }
        else
        {
            mensaje = "";
            resultadoIBMS = model.Validaciones.ResultadoIBMS;
            ValidarIBMS(false);

            if (model.ExisteAvisoPrivacidad)
                IniciarSemaforoPrivacidad(true);
            IniciarSemaforoIdentificacion(true);
            IniciarSemaforoComparacionFacial(true);
            IniciarSemaforoHuellas(true);

            IniciarSemaforoTelefono(true);

            IniciarSemaforoCorreo(true);
            IniciarSemaforoCurp(true);
            if (model.Validaciones.ValidarIne)
                IniciarSemaforoIne(true, false);
            IniciarSemaforoListasInteres(true);
            var validarDocumentosCargado = Task.Run(async () => {
                await ValidarDocumentoCargado();
                await ConsultarDocumentoCargado();
            });
        }
    }

    private async Task ConsultarAvisoPrivacidad()
    {
        var request = new SolicitudValidacionRequest() { SolicitanteId = model.SolicitanteId, Validar = "0" };
        (string mensajeResponse, SolicitudAvisoPrivacidad privacidadResponse, string objectSerialize) = await Service.SolicitudAvisoPrivacidadPostAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = "ValidacionAvisoPrivacidad|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        validacionPrivacidad = privacidadResponse;
    }

    private async Task ConsultarIdentificacion()
    {
        var request = new SolicitudValidacionRequest() { SolicitanteId = model.SolicitanteId, Validar = "0" };
        (string mensajeResponse, SolicitudIdentificacion identificacionResponse, string objectSerialize) = await Service.SolicitudIdentificacionPostAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = "ValidacionIdentificacion|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            model.Validaciones.SemaforoIdentificacion = identificacionResponse.Resultado.Semaforo;
            model.Validaciones.ResultadoIdentificacion = identificacionResponse.Resultado.Mensaje;
            ValidarIBMS(true);
        }
        validacionIdentificacion = identificacionResponse;
    }

    private async Task ConsultarComparacionFacial()
    {
        existeFotoCamara = false;
        var request = new SolicitudValidacionRequest() { SolicitanteId = model.SolicitanteId, Validar = "0" };
        (string mensajeResponse, SolicitudComparacionFacial facialResponse, string objectSerialize) = await Service.SolicitudComparacionFacialPostAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = "ValidacionComparacionFacial|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            model.Validaciones.SemaforoFacial = facialResponse.Resultado.Semaforo;
            model.Validaciones.ResultadoFacial = facialResponse.Resultado.Mensaje;
            foreach (var item in facialResponse.Fotos)
            {
                if (item.FotoOrigenId == 1)
                {
                    existeFotoCamara = true;
                }
            }
            ValidarIBMS(true);
        }
        validacionComparacionFacial = facialResponse;
    }

    private async Task ConsultarComparacionHuellas()
    {
        var request = new SolicitudValidacionRequest() { SolicitanteId = model.SolicitanteId, Validar = "0" };
        (string mensajeResponse, SolicitudComparacionHuellas huellasResponse, string objectSerialize) = await Service.SolicitudComparacionHuellasPostAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = "ValidacionComparacionHuellas|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            model.Validaciones.SemaforoAfis = huellasResponse.Resultado.Semaforo;
            model.Validaciones.ResultadoAfis = huellasResponse.Resultado.Mensaje;
            ValidarIBMS(true);
        }
        validacionComparacionHuellas = huellasResponse;
    }

    private async Task ConsultarCorreo()
    {
        var request = new CorreoRequest()
        {
            validacionId = model.Validaciones.ValidacionId,
            resultadoCorreo = string.IsNullOrEmpty(model.Validaciones.ResultadoCorreo) ? null : model.Validaciones.ResultadoCorreo
        };
        (string mensajeResponse, CorreoResponse correoResponse, string objectSerialize) = await ServiceValidacion.ValidarCorreoAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionCorreo|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            if (correoResponse != null)
            {
                model.Validaciones.SemaforoCorreo = correoResponse.semaforo;
                model.Validaciones.ScoreCorreo = correoResponse.datos_validacion.score;
                ValidarIBMS(true);
            }
        }
        validacionCorreo = correoResponse;
    }

    private async Task ConsultarTelefono()
    {
        var request = new TelefonoRequest()
        {
            validacionId = model.Validaciones.ValidacionId,
            resultadoTelefono = string.IsNullOrEmpty(model.Validaciones.ResultadoTelefono) ? null : model.Validaciones.ResultadoTelefono
        };
        (string mensajeResponse, TelefonoResponse telefonoResponse, string objectSerialize) = await ServiceValidacion.ValidarTelefonoAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionTelefono|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            if (telefonoResponse != null)
            {
                model.Validaciones.SemaforoTelefono = telefonoResponse.semaforo;
                ValidarIBMS(true);
            }
        }
        validacionTelefono = telefonoResponse;
    }

    private async Task ConsultarCurp()
    {
        var request = new CurpRequest()
        {
            validacionId = model.Validaciones.ValidacionId,
            resultadoCurp = string.IsNullOrEmpty(model.Validaciones.ResultadoCurp) ? null : model.Validaciones.ResultadoCurp
        };
        (string mensajeResponse, CurpResponse curpResponse, string objectSerialize) = await ServiceValidacion.ValidarCurpAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionCurp|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            if (curpResponse != null)
            {
                model.Validaciones.SemaforoCurp = curpResponse.semaforo;
                ValidarIBMS(true);
            }
        }
        validacionCurp = curpResponse;
    }

    private async Task ConsultarLista()
    {
        var request = new ListaRequest()
        {
            validacionId = model.Validaciones.ValidacionId,
            resultadoListaAml = string.IsNullOrEmpty(model.Validaciones.ResultadoListaAml) ? null : model.Validaciones.ResultadoListaAml
        };
        (string mensajeResponse, ListaResponse listaResponse, string objectSerialize) = await ServiceValidacion.ValidarListasAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionListasInteres|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            if (listaResponse != null)
            {
                model.Validaciones.SemaforoListaAml = listaResponse.semaforo;
                ValidarIBMS(true);
            }
        }
        validacionListas = listaResponse;
    }

    private async Task ConsultarIne()
    {
        var ine = new IneRequest()
        {
            validacionId = model.Validaciones.ValidacionId,
            semaforoIne = "",
            resultadoIne = "",
            fechaIne = ""
        };

        if (!string.IsNullOrEmpty(model.Validaciones.ResultadoIne))
        {
            ine.semaforoIne = model.Validaciones.SemaforoIne;
            ine.resultadoIne = model.Validaciones.ResultadoIne;
            ine.fechaIne = model.Validaciones.FechaIne?.ToString("yyyy-MM-dd HH:mm:ss.fff");
        }
        (string mensajeResponse, IneResponse ineResponse, string objectSerialize) = await ServiceValidacion.ValidarIneAsync(ine);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionIne|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        else
        {
            if (ineResponse != null)
            {
                model.Validaciones.SemaforoIne = ineResponse.semaforo;
                ValidarIBMS(true);
            }
        }
        validacionIne = ineResponse;
    }

    private async Task ValidarDocumentoCargado()
    {
        if (model.DocumentosCargados != null)
        {
            foreach (var item in model.DocumentosCargados)
            {
                switch (item.TipoDocumentoId)
                {
                    case "1":
                        _documentoIdComprobanteIngresos = item.DocumentoId;
                        formatoComprobanteIngresos = item.FormatoDocumento;
                        isLoadingComprobanteIngresos = true;
                        break;

                    case "2":
                        _documentoIdComprobanteDomicilio = item.DocumentoId;
                        formatoComprobanteDomicilio = item.FormatoDocumento;
                        isLoadingComprobanteDomicilio = true;
                        break;

                    case "3":
                        _documentoIdComprobanteBancario = item.DocumentoId;
                        formatoComprobanteBancario = item.FormatoDocumento;
                        isLoadingComprobanteBancario = true;
                        break;
                }
            }
        }
        if (_documentoIdComprobanteIngresos == -1)
            _documentoIdComprobanteIngresos = 0;
        if (_documentoIdComprobanteDomicilio == -1)
            _documentoIdComprobanteDomicilio = 0;
        if (_documentoIdComprobanteBancario == -1)
            _documentoIdComprobanteBancario = 0;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConsultarDocumentoCargado()
    {
        if (model.DocumentosCargados != null)
        {
            if (_documentoIdComprobanteDomicilio > 0)
            {
                documentoComprobanteDomicilio = await ConsultarDocumentoCargado(_tipoDocumentoDomicilio, _documentoIdComprobanteDomicilio);
                await ComprobarDocumentoDomicilio();
                await InvokeAsync(StateHasChanged);
            }
            if (_documentoIdComprobanteBancario > 0)
            {
                documentoComprobanteBancario = await ConsultarDocumentoCargado(_tipoDocumentoBancario, _documentoIdComprobanteBancario);
                await ComprobarDocumentoBancario();
                await InvokeAsync(StateHasChanged);
            }
            if (_documentoIdComprobanteIngresos > 0)
            {
                documentoComprobanteIngresos = await ConsultarDocumentoCargado(_tipoDocumentoIngresos, _documentoIdComprobanteIngresos);
                await ComprobarDocumentoIngresos();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task ComprobarDocumentoIngresos()
    {
        if (documentoComprobanteIngresos != null)
        {
            validacionComprobanteIngresos = await ConsultarComprobante(_tipoDocumentoIngresos, model.Validaciones.ResultadoComprobanteIngresos);
            if (validacionComprobanteIngresos != null)
            {
                if (validacionComprobanteIngresos.error == 0)
                {
                    model.Validaciones.SemaforoComprobanteIngresos = validacionComprobanteIngresos.semaforo;
                    ValidarIBMS(true);
                }
                else
                    validacionComprobanteIngresos = null;
            }
            isLoadingComprobanteIngresos = false;
        }
    }

    private async Task ComprobarDocumentoDomicilio()
    {
        if (documentoComprobanteDomicilio != null)
        {
            validacionComprobanteDomicilio = await ConsultarComprobante(_tipoDocumentoDomicilio, model.Validaciones.ResultadoComprobanteDomicilio);
            if (validacionComprobanteDomicilio != null)
            {
                if (validacionComprobanteDomicilio.error == 0)
                {
                    model.Validaciones.SemaforoComprobanteDomicilio = validacionComprobanteDomicilio.semaforo;
                    ValidarIBMS(true);
                }
                else
                    validacionComprobanteDomicilio = null;
            }
            isLoadingComprobanteDomicilio = false;
        }
    }

    private async Task ComprobarDocumentoBancario()
    {
        if (documentoComprobanteBancario != null)
        {
            validacionComprobanteBancario = await ConsultarComprobante(_tipoDocumentoBancario, model.Validaciones.ResultadoComprobanteBancario);
            if (validacionComprobanteBancario != null)
            {
                if (validacionComprobanteBancario.error == 0)
                {
                    model.Validaciones.SemaforoComprobanteBancario = validacionComprobanteBancario.semaforo;
                    ValidarIBMS(true);
                }
                else
                    validacionComprobanteBancario = null;
            }
            isLoadingComprobanteBancario = false;
        }
    }

    private async Task<SolicitudDocumento> ConsultarDocumentoCargado(string TipoDocumentoId, int DocumentoId)
    {
        var request = new SolicitudDocumentoRequest() { SolicitanteId = model.SolicitanteId, DocumentoId = DocumentoId };
        (string mensajeResponse, SolicitudDocumento documentoResponse, string objectSerialize) = await Service.SolicitudDocumentoPostAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ConsultarDocumentoCargado{TipoDocumentoId}|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        return documentoResponse;
    }

    private async Task<ComprobanteResponse> ConsultarComprobante(string TipoComprobante, string Referencia)
    {
        var request = new ComprobanteRequest()
        {
            revalidar = string.IsNullOrEmpty(Referencia) ? "true" : "false",
            resultado_comprobante_referencia = string.IsNullOrEmpty(Referencia) ? null : Referencia,
            validacion_id = model.Validaciones.ValidacionId,
            tipo_comprobante = TipoComprobante
        };
        (string mensajeResponse, ComprobanteResponse comprobanteResponse, string objectSerialize) = await ServiceValidacion.ValidarComprobanteAsync(request);
        if (!string.IsNullOrEmpty(mensajeResponse))
        {
            var bitacora = new BitacoraRequest() { OrigenId = origenId, TipoLogId = tipoLogIdError, UsuarioId = Credencial.UsuarioId, Mensaje = mensajeResponse, Referencia = $"ValidacionDocumento{TipoComprobante}|{model.SolicitanteId}|" + objectSerialize };
            await ServiceServicio.BitacoraPostAsync(bitacora);
        }
        return comprobanteResponse;
    }

    private async Task ConsultarValidaciones(string TituloValidacion)
    {
        var request = new SolicitudValidacionRequest() { SolicitanteId = Id };
        (string mensajeResponse, SolicitudValidacion respuestaResponse) = await Service.SolicitudValidacionesPostAsync(request);
        if (string.IsNullOrEmpty(mensajeResponse))
        {
            switch(TituloValidacion)
            {
                case TituloIne:
                    model.Validaciones.SemaforoIne = respuestaResponse.SemaforoIne;
                    model.Validaciones.ResultadoIne = respuestaResponse.ResultadoIne;
                    model.Validaciones.FechaIne = respuestaResponse.FechaIne;
                    break;
                case TituloComprobanteDomicilio:
                    model.Validaciones.SemaforoComprobanteDomicilio = respuestaResponse.SemaforoComprobanteDomicilio;
                    model.Validaciones.ResultadoComprobanteDomicilio = respuestaResponse.ResultadoComprobanteDomicilio;
                    model.Validaciones.FechaComprobanteDomicilio = respuestaResponse.FechaComprobanteDomicilio;
                    break;
                case TituloComprobanteBancario:
                    model.Validaciones.SemaforoComprobanteBancario = respuestaResponse.SemaforoComprobanteBancario;
                    model.Validaciones.ResultadoComprobanteBancario = respuestaResponse.ResultadoComprobanteBancario;
                    model.Validaciones.FechaComprobanteBancario = respuestaResponse.FechaComprobanteBancario;
                    break;
                case TituloComprobanteIngresos:
                    model.Validaciones.SemaforoComprobanteIngresos = respuestaResponse.SemaforoComprobanteIngresos;
                    model.Validaciones.ResultadoComprobanteIngresos = respuestaResponse.ResultadoComprobanteIngresos;
                    model.Validaciones.FechaComprobanteIngresos = respuestaResponse.FechaComprobanteIngresos;
                    break;
            }
        }
    }

    private void ValidarIBMS(bool AnimarScore)
    {
        if (string.IsNullOrEmpty(resultadoIBMS))
        {
            (float score, string semaforo) = Validaciones.CalcularScoreGeneral(model.Validaciones);
            model.Validaciones.ResultadoIBMS = score.ToString("0");
            model.Validaciones.SemaforoIBMS = semaforo;
            if (AnimarScore)
                Task.Run(async () => await JS.InvokeVoidAsync("mostrarScore", divProgressScore, 100, model.Validaciones.ResultadoIBMS, 60, "#EAEAEA", model.Validaciones.SemaforoIBMS, "%", false));
        }
    }

    private void OnRegresar()
    {
        if (Estatus >= 0)
        {
            NavigationManager.NavigateTo($"/{UrlOrigen}/{Estatus}");
        }
        else
        {
            NavigationManager.NavigateTo("/" + UrlOrigen);
        }
    }

    private void OnListaNegra()
    {
        agregarListaNegra = true;
        mensajePopup = "¿Estas seguro de agregar a lista negra?";
        popupOpen = true;
    }

    private void OnMostrarIdentificacion()
    {
        mostrarIdentificacion = !mostrarIdentificacion;
        if (mostrarIdentificacion)
        {
            isLoadingIdentificacion = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingIdentificacion = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarHuellas()
    {
        mostrarHuellas = !mostrarHuellas;
        if (mostrarHuellas)
        {
            isLoadingComparacionHuellas = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingComparacionHuellas = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarComparacionFacial()
    {
        mostrarComparacionFacial = !mostrarComparacionFacial;
        if (mostrarComparacionFacial)
        {
            isLoadingComparacionFacial = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingComparacionFacial = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarComprobanteDomicilio()
    {
        mostrarComprobanteDomicilio = !mostrarComprobanteDomicilio;
        if (mostrarComprobanteDomicilio)
        {
            isLoadingComprobanteDomicilio = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingComprobanteDomicilio = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarComprobanteBancario()
    {
        mostrarComprobanteBancario = !mostrarComprobanteBancario;
        if (mostrarComprobanteBancario)
        {
            isLoadingComprobanteBancario = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingComprobanteBancario = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarComprobanteIngresos()
    {
        mostrarComprobanteIngresos = !mostrarComprobanteIngresos;
        if (mostrarComprobanteIngresos)
        {
            isLoadingComprobanteIngresos = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingComprobanteIngresos = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnMostrarPrivacidad()
    {
        mostrarPrivacidad = !mostrarPrivacidad;
        if (mostrarPrivacidad)
        {
            isLoadingPrivacidad = true;
            Task.Run(async () =>
            {
                await Task.Delay(500);
                isLoadingPrivacidad = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void OnResolucion(bool resolucion)
    {
        agregarResolucion = true;
        if (resolucion)
        {
            tipoResolucionId = 1;
            mensajePopup = "¿Estas seguro de aprobar la solicitud?";
        }
        else
        {
            tipoResolucionId = 2;
            mensajePopup = "¿Estas seguro de rechazar la solicitud?";
        }
        popupOpen = true;
    }

    private void OnPopupClose(bool Respuesta)
    {
        popupOpen = false;
        if (Respuesta)
        {
            if (agregarListaNegra)
                mensajePopupComent = "Agregar comentario";

            if (agregarResolucion)
                mensajePopupComent = "Agregar comentario";

            popupOpenComent = true;
        }
    }

    private async Task OnPopupComentClose(string Respuesta)
    {
        popupOpenComent = false;
        if (!string.IsNullOrEmpty(Respuesta))
        {
            (string mensajeResponse, int resultado) response = ("", 0);

            if (agregarListaNegra)
            {
                ListaNegraRequest lista = new ListaNegraRequest()
                {
                    SolicitanteId = model.SolicitanteId,
                    NombreUsuario = Credencial.NombreUsuario,
                    Motivo = Respuesta,
                    TipoMovimientoId = 1
                };
                response = await Service.ListaNegraPostAsync(lista);
            }
            if (agregarResolucion)
            {
                var resolucion = new ResolucionRequest()
                {
                    SolicitanteId = model.SolicitanteId,
                    UsuarioId = Credencial.UsuarioId,
                    Comentario = Respuesta,
                    TipoResolucionId = tipoResolucionId,
                    ResultadoIBMS = model.Validaciones.ResultadoIBMS,
                    SemaforoIBMS = model.Validaciones.SemaforoIBMS,
                    ResultadoListaNegra = model.Validaciones.ResultadoListaNegra,
                    SemaforoListaNegra = model.Validaciones.SemaforoListaNegra,
                    FechaListaNegra = model.Validaciones.FechaListaNegra
                };
                response = await Service.ResolucionPutAsync(resolucion);
            }
            if (response.resultado <= 0)
                mensaje = response.mensajeResponse;
            else
            {
                await ConsultarDatos(model.SolicitanteId);
            }
        }
        agregarListaNegra = false;
        agregarResolucion = false;
    }

    private void OnAccion(int Id)
    {
        InicializarVariables();
        NavigationManager.NavigateTo($"/solicitudDetalle/{Id}/{UrlOrigen}/{Estatus}");
    }

    private void OnRecargarSemaforo(TipoSemaforo TipoRecarga)
    {
        switch (TipoRecarga)
        {
            case TipoSemaforo.Identificacion:
                IniciarSemaforoIdentificacion(true);
                break;

            case TipoSemaforo.Privacidad:
                IniciarSemaforoPrivacidad(true);
                break;

            case TipoSemaforo.ComparacionFacial:
                IniciarSemaforoComparacionFacial(true);
                break;

            case TipoSemaforo.Huellas:
                IniciarSemaforoHuellas(true);
                break;

            case TipoSemaforo.Correo:
                IniciarSemaforoCorreo(true);
                break;

            case TipoSemaforo.Telefono:
                IniciarSemaforoTelefono(true);
                break;

            case TipoSemaforo.Curp:
                IniciarSemaforoCurp(true);
                break;

            case TipoSemaforo.ListasInteres:
                IniciarSemaforoListasInteres(true);
                break;

            case TipoSemaforo.Ine:
                IniciarSemaforoIne(true, true);
                break;

            case TipoSemaforo.ComprobanteBancario:
                Task.Run(async () => { await IniciarSemaforoComprobanteBancario(true, true); });
                break;

            case TipoSemaforo.ComprobanteDomicilio:
                Task.Run(async () => { await IniciarSemaforoComprobanteDomicilio(true, true); });
                break;

            case TipoSemaforo.ComprobanteIngresos:
                Task.Run(async () => { await IniciarSemaforoComprobanteIngresos(true, true); });
                break;
        }
    }

    private void InicializarVariables()
    {
        recargarPagina = true;
        renderizarMapa = true;
        existeFotoCamara = false;

        isLoadingModel = true;
        model = null;
        mostrarListaNegra = false;
        mostrarResolucion = false;

        IniciarSemaforoIdentificacion(false);
        IniciarSemaforoPrivacidad(false);
        IniciarSemaforoComparacionFacial(false);
        IniciarSemaforoHuellas(false);
        IniciarSemaforoIne(false, false);
        IniciarSemaforoCorreo(false);
        IniciarSemaforoTelefono(false);
        IniciarSemaforoCurp(false);
        IniciarSemaforoListasInteres(false);

        var comprobanteBancario = Task.Run(async () => { await IniciarSemaforoComprobanteBancario(false, false); });
        comprobanteBancario.Wait();
        var comprobanteDomicilio = Task.Run(async () => { await IniciarSemaforoComprobanteDomicilio(false, false); });
        comprobanteDomicilio.Wait();
        var comprobanteIngresos = Task.Run(async () => { await IniciarSemaforoComprobanteIngresos(false, false); });
        comprobanteIngresos.Wait();

    }

    private void IniciarSemaforoIdentificacion(bool Consultar)
    {
        isLoadingIdentificacion = true;
        validacionIdentificacion = null;
        mostrarIdentificacion = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarIdentificacion();
                isLoadingIdentificacion = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoPrivacidad(bool Consultar)
    {
        isLoadingPrivacidad = true;
        validacionPrivacidad = null;
        mostrarPrivacidad = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarAvisoPrivacidad();
                isLoadingPrivacidad = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoComparacionFacial(bool Consultar)
    {
        isLoadingComparacionFacial = true;
        validacionComparacionFacial = null;
        mostrarComparacionFacial = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarComparacionFacial();
                isLoadingComparacionFacial = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoHuellas(bool Consultar)
    {
        isLoadingComparacionHuellas = true;
        validacionComparacionHuellas = null;
        mostrarHuellas = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarComparacionHuellas();
                isLoadingComparacionHuellas = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoCorreo(bool Consultar)
    {
        isLoadingCorreo = true;
        validacionCorreo = null;
        mostrarCorreo = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarCorreo();
                isLoadingCorreo = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoTelefono(bool Consultar)
    {
        isLoadingTelefono = true;
        validacionTelefono = null;
        mostrarTelefono = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarTelefono();
                isLoadingTelefono = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoCurp(bool Consultar)
    {
        isLoadingCurp = true;
        validacionCurp = null;
        mostrarCurp = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarCurp();
                isLoadingCurp = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoListasInteres(bool Consultar)
    {
        isLoadingListas = true;
        validacionListas = null;
        mostrarListas = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await ConsultarLista();
                isLoadingListas = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void IniciarSemaforoIne(bool Consultar, bool Reintentar)
    {
        isLoadingIne = true;
        validacionIne = null;
        mostrarIne = false;
        if (Consultar)
        {
            Task.Run(async () =>
            {
                await InvokeAsync(StateHasChanged);
                if(Reintentar)
                    await ConsultarValidaciones(TituloIne);
                await ConsultarIne();
                isLoadingIne = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task IniciarSemaforoComprobanteIngresos(bool Consultar, bool Reintentar)
    {
        isLoadingComprobanteIngresos = true;
        mostrarComprobanteIngresos = false;
        if (Consultar)
        {
            await InvokeAsync(StateHasChanged);
            if (Reintentar)
                await ConsultarValidaciones(TituloComprobanteIngresos);
            await ComprobarDocumentoIngresos();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            validacionComprobanteIngresos = null;
            _documentoIdComprobanteIngresos = -1;
            formatoComprobanteIngresos = "";
            documentoComprobanteIngresos = null;
        }
    }

    private async Task IniciarSemaforoComprobanteDomicilio(bool Consultar, bool Reintentar)
    {
        isLoadingComprobanteDomicilio = true;
        mostrarComprobanteDomicilio = false;
        if (Consultar)
        {
            await InvokeAsync(StateHasChanged);
            if (Reintentar)
                await ConsultarValidaciones(TituloComprobanteDomicilio);
            await ComprobarDocumentoDomicilio();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            validacionComprobanteDomicilio = null;
            _documentoIdComprobanteDomicilio = -1;
            formatoComprobanteDomicilio = "";
            documentoComprobanteDomicilio = null;
        }
    }

    private async Task IniciarSemaforoComprobanteBancario(bool Consultar, bool Reintentar)
    {
        isLoadingComprobanteBancario = true;
        mostrarComprobanteBancario = false;
        if (Consultar)
        {
            await InvokeAsync(StateHasChanged);
            if (Reintentar)
                await ConsultarValidaciones(TituloComprobanteBancario);
            await ComprobarDocumentoBancario();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            validacionComprobanteBancario = null;
            _documentoIdComprobanteBancario = -1;
            formatoComprobanteBancario = "";
            documentoComprobanteBancario = null;
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IValidacionService ServiceValidacion { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IServicioService ServiceServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IPaqueteService Service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusquedaRequest Busqueda { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UsuarioCredencial Credencial { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState AppState { get; set; }
    }
}
#pragma warning restore 1591
